#!/usr/bin/env python3
"""
Deploy Gardener Shoot Cluster â€” Debugging Enabled
"""

import os
import sys
import yaml
import inspect
from pprint import pprint
from python_path import PythonPath

with PythonPath("../../../", relative_to=__file__):
  from library.python.lib import common, config as config_module, gardener, lscrypt
import landscape_tools

def main():
    print("\n=== [STEP 1] Load Config ===")
    config_object = config_module.Config()

    print("\n--- CONFIG OBJECT (YAML FORMAT) ---")
    print(yaml.dump(vars(config_object), default_flow_style=False, sort_keys=False))

    print("\n=== [STEP 2] Rendered Shoot Manifest ===")
    print("Path:", config_object.rendered_shoot_path)
    if os.path.exists(config_object.rendered_shoot_path):
        with open(config_object.rendered_shoot_path) as f:
            print("--- MANIFEST CONTENT ---")
            print(f.read())
    else:
        print("[WARN] Manifest file not found")

    print("\n=== [STEP 3] Check Available Methods in config_object ===")
    for method_name in dir(config_object):
        if method_name.startswith("__"):
            continue
        attr = getattr(config_object, method_name)
        if callable(attr):
            print(f"\n--- Method: {method_name} ---")
            try:
                print(inspect.getsource(attr))
            except (OSError, TypeError):
                print(f"[WARN] Could not retrieve source for {method_name}")


    print("\n=== [STEP 4] Create Gardener Helper ===")
    if hasattr(config_object, "get_gardener_helper") and callable(getattr(config_object, "get_gardener_helper")):
        gardener_helper = config_object.get_gardener_helper()
        print("\n=== Inspecting Gardener Helper ===")
        print(inspect.getsource(gardener.GardenerHelper))
        print("[INFO] gardener_helper initialized")
    else:
        print("[ERROR] get_gardener_helper() is not available!")
        exit(1)

    print("\n=== [STEP 5] Write Kubeconfig ===")
    config_object.write_kubeconfig_file()
    print(f"[INFO] Kubeconfig written to: {config_object.kubeconfig_file_path}")

    print("\n=== [STEP 6] Deploy Shoot ===")
    with landscape_tools.color_output("green"):
        print(f"Deploying shoot from manifest: {config_object.rendered_shoot_path}")
    exit(0)
    gardener_helper.create_shoot(config_object.rendered_shoot_path)

    print("[INFO] Polling shoot creation status...")
    creation_status = gardener_helper.poll_shoot_status(timeout=3000, interval=10)

    if creation_status is True:
        print("[INFO] Shoot created successfully!")

        name = config_object.cluster_name
        namespace = config_object.namespace
        domain = config_object.get_dns_domain()
        kubeconfig = gardener_helper.get_kubeconfig()

        export = {
            "exports": {
                "clusters": [
                    {
                        "name": name,
                        "namespace": namespace,
                        "domain": domain,
                        "kubeconfig": kubeconfig,
                    }
                ]
            }
        }

        print("\n=== [STEP 7] Exporting Cluster Info ===")
        print(yaml.dump(export, default_flow_style=False, sort_keys=False))
        lscrypt.write("cluster", "export.yml", export)
        print("[INFO] Export written to lscrypt: cluster/export.yml")

    else:
        print("[ERROR] Shoot creation failed.")
        exit(1)

    print("\n=== [DONE] Cluster Deployment Completed ===")

if __name__ == "__main__":
    main()

context: (( &temporary ( merge ) ))

apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
metadata:
  name: (( .context.config.cluster.name ))
  namespace: (( .context.gardener_namespace ))
spec:
  secretBindingName: (( .context.config.cluster.provider_secret ))
  cloudProfile:
    name: gcp
  region: (( .context.imports.iaas_provider.landscape.region ))
  purpose: (( .context.config.cluster.purpose ))
  provider:
    type: gcp
    
    # Provider-specific controlPlaneConfig
    controlPlaneConfig:
      apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
      kind: ControlPlaneConfig
      zone: (( .context.imports.iaas_provider.landscape.region_zones_list.0 ))

    # Provider-specific infrastructureConfig
    infrastructureConfig:
      apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1
      kind: InfrastructureConfig
      networks:
        workers: (( .context.config.cluster.cidr ))
        # Optional VPC settings if needed
        # vpc:
        #   name: custom-vpc
        # flowLogs:
        #   aggregationInterval: interval-5-sec
        #   flowSampling: 0.5
        #   metadata: include-all-metadata

    # Workers configuration
    workers:
      - cri: (( .context.config.cluster.vm_worker_group.cri ))
        name: vmetrics
        machine:
          type: n2-standard-8  # 8 vCPUs, 32 GB memory
          image:
            name: (( .context.config.cluster.vm_worker_group.machine.image.name ))
            version: (( .context.config.cluster.vm_worker_group.machine.image.version ))
          architecture: amd64
        maximum: (( .context.config.cluster.vm_worker_group.maximum ))
        minimum: (( .context.config.cluster.vm_worker_group.minimum ))
        maxSurge: (( .context.config.cluster.vm_worker_group.maxSurge ))
        maxUnavailable: (( .context.config.cluster.vm_worker_group.maxUnavailable ))
        volume:
          type: pd-standard
          size: (( .context.config.cluster.vm_worker_group.volume.size ))
        zones:
          - (( .context.imports.iaas_provider.landscape.region_zones_list.0 ))
          - (( .context.imports.iaas_provider.landscape.region_zones_list.1 ))
          - (( .context.imports.iaas_provider.landscape.region_zones_list.2 ))
        systemComponents:
          allow: true
        updateStrategy: AutoRollingUpdate
      - cri: (( .context.config.cluster.otel_worker_group.cri ))
        name: otel-col
        machine:
          type: n2-standard-4  # 4 vCPUs, 16 GB memory
          image:
            name: (( .context.config.cluster.otel_worker_group.machine.image.name ))
            version: (( .context.config.cluster.otel_worker_group.machine.image.version ))
          architecture: amd64
        maximum: (( .context.config.cluster.otel_worker_group.maximum ))
        minimum: (( .context.config.cluster.otel_worker_group.minimum ))
        maxSurge: (( .context.config.cluster.otel_worker_group.maxSurge ))
        maxUnavailable: (( .context.config.cluster.otel_worker_group.maxUnavailable ))
        volume:
          type: pd-standard
          size: (( .context.config.cluster.otel_worker_group.volume.size ))
        zones:
          - (( .context.imports.iaas_provider.landscape.region_zones_list.1 ))
          - (( .context.imports.iaas_provider.landscape.region_zones_list.2 ))
          - (( .context.imports.iaas_provider.landscape.region_zones_list.0 ))
        systemComponents:
          allow: true
        updateStrategy: AutoRollingUpdate
      - cri: (( .context.config.cluster.plutono_worker_group.cri ))
        name: generic
        machine:
          type: n2-standard-4  # 4 vCPUs, 16 GB memory
          image:
            name: (( .context.config.cluster.plutono_worker_group.machine.image.name ))
            version: (( .context.config.cluster.plutono_worker_group.machine.image.version ))
          architecture: amd64
        maximum: (( .context.config.cluster.plutono_worker_group.maximum ))
        minimum: (( .context.config.cluster.plutono_worker_group.minimum ))
        maxSurge: (( .context.config.cluster.plutono_worker_group.maxSurge ))
        maxUnavailable: (( .context.config.cluster.plutono_worker_group.maxUnavailable ))
        volume:
          type: pd-standard
          size: (( .context.config.cluster.plutono_worker_group.volume.size ))
        zones:
          - (( .context.imports.iaas_provider.landscape.region_zones_list.2 ))
          - (( .context.imports.iaas_provider.landscape.region_zones_list.1 ))
          - (( .context.imports.iaas_provider.landscape.region_zones_list.0 ))
        systemComponents:
          allow: true
        updateStrategy: AutoRollingUpdate
    workersSettings:
      sshAccess:
        enabled: true

  kubernetes:
    version: (( .context.config.cluster.k8s_version ))
    clusterAutoscaler:
      expander: (( .context.config.cluster.cluster_autoscaler.expander ))
      scaleDownUtilizationThreshold: (( .context.config.cluster.cluster_autoscaler.scaleDownUtilizationThreshold ))
      scaleDownUnneededTime: (( .context.config.cluster.cluster_autoscaler.scaleDownUnneededTime ))
      scaleDownDelayAfterAdd: (( .context.config.cluster.cluster_autoscaler.scaleDownDelayAfterAdd ))
      scaleDownDelayAfterFailure: (( .context.config.cluster.cluster_autoscaler.scaleDownDelayAfterFailure ))
      scaleDownDelayAfterDelete: (( .context.config.cluster.cluster_autoscaler.scaleDownDelayAfterDelete ))
      scanInterval: (( .context.config.cluster.cluster_autoscaler.scanInterval ))
    kubeControllerManager:
      horizontalPodAutoscaler:
        syncPeriod: (( .context.config.cluster.kube_controller_manager.horizontal_pod_autoscaler.syncPeriod ))
        tolerance: (( .context.config.cluster.kube_controller_manager.horizontal_pod_autoscaler.tolerance ))
        downscaleStabilization: (( .context.config.cluster.kube_controller_manager.horizontal_pod_autoscaler.downscale_stabilization ))
        initialReadinessDelay: (( .context.config.cluster.kube_controller_manager.horizontal_pod_autoscaler.initial_readinessDelay ))
        cpuInitializationPeriod: (( .context.config.cluster.kube_controller_manager.horizontal_pod_autoscaler.cpu_initialization_period ))

  dns:
    domain: (( .context.config.cluster.name "." .context.config.cluster.project_name ".shoot.canary.k8s-hana.ondemand.com" ))

  extensions:
    - type: shoot-dns-service
      providerConfig:
        apiVersion: service.dns.extensions.gardener.cloud/v1alpha1
        kind: DNSConfig
        syncProvidersFromShootSpecDNS: true
    - type: shoot-cert-service
      providerConfig:
        apiVersion: service.cert.extensions.gardener.cloud/v1alpha1
        kind: CertConfig
        shootIssuers:
          enabled: true

  networking:
    type: calico
    providerConfig:
      overlay:
        enabled: false
    pods: 100.64.0.0/12
    nodes: (( .context.config.cluster.cidr ))
    services: 100.104.0.0/13
    ipFamilies:
      - IPv4

  maintenance:
    timeWindow:
      begin: 220000+0100
      end: 230000+0100
    autoUpdate:
      kubernetesVersion: true
      machineImageVersion: true

  monitoring:
    alerting:
      emailReceivers:
        - (( .context.config.cluster.user_email ))

  addons:
    kubernetesDashboard:
      enabled: false
      authenticationMode: token
    nginxIngress:
      enabled: false
      externalTrafficPolicy: Cluster

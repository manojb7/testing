context: (( &temporary ( merge ) ))

apiVersion: core.gardener.cloud/v1beta1
kind: Shoot
metadata:
  name: (( .context.config.cluster.cluster_name ))
  namespace: (( .context.gardener_namespace ))

spec:
  secretBindingName: (( .context.config.cluster.provider_secret ))
  cloudProfile:
    name: (( .context.config.cluster.provider_type ))
  region: (( .context.config.cluster.region ))
  purpose: (( .context.config.cluster.purpose ))

  provider:
    type: (( .context.config.cluster.provider_type ))

    controlPlaneConfig: (( &template
      (( if eq .context.config.cluster.provider_type "aws" ))
      {
        "apiVersion": "aws.provider.extensions.gardener.cloud/v1alpha1",
        "kind": "ControlPlaneConfig",
        "cloudControllerManager": {
          "useCustomRouteController": true
        },
        "storage": {
          "managedDefaultClass": true
        }
      }
      (( else if eq .context.config.cluster.provider_type "azure" ))
      {
        "apiVersion": "azure.provider.extensions.gardener.cloud/v1alpha1",
        "kind": "ControlPlaneConfig"
      }
      (( else if eq .context.config.cluster.provider_type "gcp" ))
      {
        "apiVersion": "gcp.provider.extensions.gardener.cloud/v1alpha1",
        "kind": "ControlPlaneConfig"
      }
      (( end ))
    ))

    infrastructureConfig: (( &template
      (( if eq .context.config.cluster.provider_type "aws" ))
      {
        "apiVersion": "aws.provider.extensions.gardener.cloud/v1alpha1",
        "kind": "InfrastructureConfig",
        "networks": {
          "vpc": {
            "cidr": "10.180.0.0/16"
          },
          "zones": (( .context.imports.iaas_provider.aws.zones ))
        }
      }
      (( else if eq .context.config.cluster.provider_type "azure" ))
      {
        "apiVersion": "azure.provider.extensions.gardener.cloud/v1alpha1",
        "kind": "InfrastructureConfig",
        "networks": {
          "workers": "10.250.0.0/16"
        }
      }
      (( else if eq .context.config.cluster.provider_type "gcp" ))
      {
        "apiVersion": "gcp.provider.extensions.gardener.cloud/v1alpha1",
        "kind": "InfrastructureConfig",
        "networks": {
          "workers": "10.250.0.0/16"
        }
      }
      (( end ))
    ))

    workers:
      - name: (( .context.config.cluster.worker_group_name ))
        machine:
          type: (( .context.config.cluster.machine_type ))
          image:
            name: (( .context.config.cluster.image_name ))
            version: (( .context.config.cluster.image_version ))
        volume:
          type: (( .context.config.cluster.volume_type ))
          size: (( .context.config.cluster.volume_size ))Gi
        maximum: (( .context.config.cluster.autoscaler_max ))
        minimum: (( .context.config.cluster.autoscaler_min ))
        maxSurge: 1
        maxUnavailable: 0
        zones: (( .context.imports.iaas_provider.landscape.region_zones_list ))
        cri:
          name: containerd
        systemComponents:
          allow: true
        updateStrategy: AutoRollingUpdate

    workersSettings:
      sshAccess:
        enabled: true

  kubernetes:
    version: (( .context.config.cluster.k8s_version ))

  dns:
    domain: (( .context.config.cluster.cluster_name )).perftests.shoot.canary.k8s-hana.ondemand.com

  networking:
    type: calico
    pods: (( .context.config.cluster.pods_cidr ))
    nodes: (( .context.config.cluster.zone )).0.0/16
    services: (( .context.config.cluster.services_cidr ))
    ipFamilies:
      - IPv4

  maintenance:
    autoUpdate:
      kubernetesVersion: true
      machineImageVersion: true
    timeWindow:
      begin: 220000+0100
      end: 230000+0100

  monitoring:
    alerting:
      emailReceivers:
        - (( .context.config.cluster.user_email ))

  addons:
    kubernetesDashboard:
      enabled: false
    nginxIngress:
      enabled: false

  extensions:
    - type: shoot-dns-service
      providerConfig:
        apiVersion: service.dns.extensions.gardener.cloud/v1alpha1
        kind: DNSConfig
        syncProvidersFromShootSpecDNS: true
    - type: shoot-cert-service
      providerConfig:
        apiVersion: service.cert.extensions.gardener.cloud/v1alpha1
        kind: CertConfig
        shootIssuers:
          enabled: true
